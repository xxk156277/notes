(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{389:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"八-原型、继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八-原型、继承"}},[t._v("#")]),t._v(" 八.原型、继承")]),t._v(" "),s("h2",{attrs:{id:"_8-1原型继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1原型继承"}},[t._v("#")]),t._v(" 8.1原型继承")]),t._v(" "),s("p",[t._v("在JavaScript中，对象有一个特殊的隐藏属性[[Prototype]],它要么为null，要么就是对另一个对象的引用。该对象被称为“原型”：")]),t._v(" "),s("p",[t._v("原型继承：当我们从object中读取某个确实的属性时，JavaScript会自动从原型中获取该属性。")]),t._v(" "),s("h3",{attrs:{id:"prototype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" [[Prototype]]")]),t._v(" "),s("p",[t._v("可以通过"),s("code",[t._v("__proto__")]),t._v("设置[[Prototype]]属性")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    eats"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rabbit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    jumps"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    __proto__"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("animal "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置[[Prototype]]属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将 animal 设置为 rabbit 的原型。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//rabbit.__proto__ = animal; //设置[[Prototype]]属性")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在这两个属性我们都能在 rabbit 中找到：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" rabbit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eats "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true (**)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" rabbit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jumps "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("原型链可以很长，可以多个对象形成一条连。但是有限制：")]),t._v(" "),s("ol",[s("li",[t._v("引用不能形成闭环。如果我们试图在一个闭环中分配 "),s("code",[t._v("__proto__")]),t._v("，JavaScript 会抛出错误。")]),t._v(" "),s("li",[s("code",[t._v("__proto__")]),t._v(" 的值可以是对象，也可以是 "),s("code",[t._v("null")]),t._v("。而其他的类型都会被忽略。")]),t._v(" "),s("li",[t._v("只能有一个 "),s("code",[t._v("[[Prototype]]")]),t._v("。一个对象不能从其他两个对象获得继承。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("1、"),s("code",[t._v("__proto__")]),t._v(" 与内部的 "),s("code",[t._v("[[Prototype]]")]),t._v(" "),s("strong",[t._v("不一样")]),t._v("。"),s("code",[t._v("__proto__")]),t._v(" 是 "),s("code",[t._v("[[Prototype]]")]),t._v(" 的 getter/setter。")]),t._v(" "),s("p",[t._v("2、"),s("code",[t._v("__proto__")]),t._v(" 属性有点过时了。它的存在是出于历史的原因，现代编程语言建议我们应该使用函数 "),s("code",[t._v("Object.getPrototypeOf/Object.setPrototypeOf")]),t._v(" 来取代 "),s("code",[t._v("__proto__")]),t._v(" 去 get/set 原型。")])]),t._v(" "),s("h3",{attrs:{id:"写入不使用原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写入不使用原型"}},[t._v("#")]),t._v(" 写入不使用原型")])])}),[],!1,null,null,null);a.default=r.exports}}]);