(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{390:function(t,a,s){"use strict";s.r(a);var e=s(45),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"四-object-基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-object-基础知识"}},[t._v("#")]),t._v(" 四.Object：基础知识")]),t._v(" "),s("h2",{attrs:{id:"_4-1-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-对象"}},[t._v("#")]),t._v(" 4.1  对象")]),t._v(" "),s("h4",{attrs:{id:"js中有八种数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中有八种数据类型"}},[t._v("#")]),t._v(" js中有八种数据类型：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("7 种原始类型："),s("code",[t._v("string")]),t._v("，"),s("code",[t._v("number")]),t._v("，"),s("code",[t._v("bigint")]),t._v("，"),s("code",[t._v("boolean")]),t._v("，"),s("code",[t._v("symbol")]),t._v("，"),s("code",[t._v("null")]),t._v(" 和 "),s("code",[t._v("undefined")])])]),t._v(" "),s("li",[s("p",[t._v("对象：")]),t._v(" "),s("ul",[s("li",[t._v("能够储存多个值作为属性，也可以将一个函数作为属性储存。")]),t._v(" "),s("li",[t._v("利用大括号可以创建"),s("code",[t._v("{key ：value}")])]),t._v(" "),s("li",[t._v("不同属性之间可以用逗号隔开，这种逗号叫做尾随或者悬挂逗号")])]),t._v(" "),s("blockquote",[s("p",[t._v("const声明的对象其内部的属性值是可以更改的")])])])]),t._v(" "),s("h4",{attrs:{id:"属性值简写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性值简写"}},[t._v("#")]),t._v(" 属性值简写")]),t._v(" "),s("p",[t._v("实际开发中，如果我们用已存在的变量当作属性名，可以使用简写")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//简写：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"属性名限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性名限制"}},[t._v("#")]),t._v(" 属性名限制")]),t._v(" "),s("p",[t._v("属性命名没有限制，可以是任何字符或者symbol")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：一个名为 "),s("code",[t._v("__proto__")]),t._v(" 的属性。我们不能将它设置为一个非对象的值")])]),t._v(" "),s("h4",{attrs:{id:"属性存在性测试-in-操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性存在性测试-in-操作符"}},[t._v("#")]),t._v(" 属性存在性测试，“in” 操作符")]),t._v(" "),s("p",[t._v("JavaScript 的对象有一个需要注意的特性：能够被访问任何属性。即使属性不存在也不会报错！读取不存在的属性只会得到 "),s("code",[t._v("undefined")])]),t._v(" "),s("p",[t._v("通过in操作符可以检查是否有某个属性"),s("code",[t._v('"key" in object')])]),t._v(" "),s("h4",{attrs:{id:"for-in-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-循环"}},[t._v("#")]),t._v(' "for...in"循环')]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对此对象属性中的每个键执行的代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("对象有特别的顺序：整数属性会被进行排序，其他属性则按照创建的顺序显示")]),t._v(" "),s("p",[t._v("“"),s("code",[t._v("整数属性")]),t._v("”指的是一个可以在不做任何更改的情况下与一个整数进行相互转换的字符串。")])]),t._v(" "),s("h2",{attrs:{id:"_4-2-对象引用和复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-对象引用和复制"}},[t._v("#")]),t._v(" 4.2   对象引用和复制")]),t._v(" "),s("p",[t._v("与原始类型相比，对象的根本区别之一是对象都是‘通过引用’被存储和复制的")]),t._v(" "),s("ul",[s("li",[t._v("原始类型赋值可以得到两个独立的变量")]),t._v(" "),s("li",[t._v('对象赋值 被赋值的变量存储的是该对象在内存中的地址，换句话说就是对该对象的“引用"')])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("当一个对象变量被复制 —— 引用则被复制，而该对象并没有被复制。")])])]),t._v(" "),s("h4",{attrs:{id:"克隆与合并-object-assign"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆与合并-object-assign"}},[t._v("#")]),t._v(" 克隆与合并，Object.assign")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("复制对象需要创建一个新对象，并通过遍历现有属性的结构，在原始类型值的层面，将其复制到新对象，以复制已有对象的结构。")])]),t._v(" "),s("li",[s("p",[t._v("Object.assign")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("src1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("深层克隆：如果某个对象的属性是其他对象的引用，该怎样处理？")]),t._v(" "),s("p",[t._v("我们应该使用会检查每个 "),s("code",[t._v("user[key]")]),t._v(" 的值的克隆循环，如果值是一个对象，那么也要复制它的结构。这就叫“深拷贝”。我们可以用递归来实现。或者不自己造轮子，使用现成的实现，例如 JavaScript 库 "),s("a",{attrs:{href:"https://lodash.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("lodash"),s("OutboundLink")],1),t._v(" 中的 "),s("a",{attrs:{href:"https://lodash.com/docs#cloneDeep",target:"_blank",rel:"noopener noreferrer"}},[t._v("_.cloneDeep(obj)"),s("OutboundLink")],1),t._v("。")])])]),t._v(" "),s("h2",{attrs:{id:"_4-3-垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-垃圾回收"}},[t._v("#")]),t._v(" 4.3   垃圾回收")]),t._v(" "),s("h4",{attrs:{id:"可达性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可达性"}},[t._v("#")]),t._v(" 可达性")]),t._v(" "),s("p",[t._v("“可达”值是那些以某种方式可访问或可用的值。它们一定是存储在内存中的。")]),t._v(" "),s("ul",[s("li",[t._v("明显不能释放的值被称作根")]),t._v(" "),s("li",[t._v("如果一个值可以通过引用或引用链从根访问任何其他值，则认为该值是可达的。")])]),t._v(" "),s("p",[t._v("在 JavaScript 引擎中有一个被称作 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)",target:"_blank",rel:"noopener noreferrer"}},[t._v("垃圾回收器"),s("OutboundLink")],1),t._v(" 的东西在后台执行。它监控着所有对象的状态，并删除掉那些已经不可达的。")]),t._v(" "),s("p",[t._v("对外引用不重要，只有传入引用才可以使对象可达。")]),t._v(" "),s("h4",{attrs:{id:"内部算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部算法"}},[t._v("#")]),t._v(" 内部算法")]),t._v(" "),s("p",[t._v("垃圾回收的基本算法被称为 “mark-and-sweep”。")]),t._v(" "),s("p",[t._v("定期执行以下“垃圾回收”步骤：")]),t._v(" "),s("ul",[s("li",[t._v("垃圾收集器找到所有的根，并“标记”（记住）它们。")]),t._v(" "),s("li",[t._v("然后它遍历并“标记”来自它们的所有引用。")]),t._v(" "),s("li",[t._v("然后它遍历标记的对象并标记 "),s("strong",[t._v("它们的")]),t._v(" 引用。所有被遍历到的对象都会被记住，以免将来再次遍历到同一个对象。")]),t._v(" "),s("li",[t._v("……如此操作，直到所有可达的（从根部）引用都被访问到。")]),t._v(" "),s("li",[t._v("没有被标记的对象都会被删除。")])]),t._v(" "),s("h2",{attrs:{id:"_4-4-对象方法-this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-对象方法-this"}},[t._v("#")]),t._v(' 4.4    对象方法，"this"')]),t._v(" "),s("p",[t._v("作为对象属性的函数被称为 "),s("strong",[t._v("方法")]),t._v("，在js中，行为action由属性中的函数来表示。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'join'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nuser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayhi")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nuser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"方法简写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法简写"}},[t._v("#")]),t._v(" 方法简写")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 与 "sayHi: function()" 一样')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"方法中的this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法中的this"}},[t._v("#")]),t._v(" 方法中的this")]),t._v(" "),s("ul",[s("li",[t._v("为了访问该对象，方法中可以使用"),s("code",[t._v("this")]),t._v("关键字，"),s("code",[t._v("this")]),t._v(" 的值就是在点之前的这个对象，即调用该方法的对象。")]),t._v(" "),s("li",[s("code",[t._v("this")]),t._v("不受限制，"),s("code",[t._v("this")]),t._v("的值时在代码运行时计算出来的，它取决于代码上下文：\n"),s("ul",[s("li",[t._v("如果 "),s("code",[t._v("obj.f()")]),t._v(" 被调用了，则 "),s("code",[t._v("this")]),t._v(" 在 "),s("code",[t._v("f")]),t._v(" 函数调用期间是 "),s("code",[t._v("obj")]),t._v("。")]),t._v(" "),s("li",[t._v("在没有对象的情况下调用："),s("code",[t._v("this")]),t._v(" == "),s("code",[t._v("undefined")])])])])]),t._v(" "),s("h4",{attrs:{id:"箭头函数没有自己的this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数没有自己的this"}},[t._v("#")]),t._v(" 箭头函数没有自己的this")]),t._v(" "),s("p",[t._v("箭头函数中引用this，this值取决于外部”正常的“函数。")]),t._v(" "),s("h2",{attrs:{id:"_4-5-构造器和操作符-new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-构造器和操作符-new"}},[t._v("#")]),t._v(' 4.5   构造器和操作符"new"')]),t._v(" "),s("h4",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("构造函数简称构造器，构造器的主要目的 —— 实现可重用的对象创建代码。")]),t._v(" "),s("ol",[s("li",[t._v("它们的命名以大写字母开头。")]),t._v(" "),s("li",[t._v("它们只能由 "),s("code",[t._v('"new"')]),t._v(" 操作符来执行。")])]),t._v(" "),s("blockquote",[s("p",[t._v("从技术上讲，任何函数都可以用作构造器。即：任何函数都可以通过 "),s("code",[t._v("new")]),t._v(" 来运行，它会执行上面的算法。“首字母大写”是一个共同的约定，以明确表示一个函数将被使用 "),s("code",[t._v("new")]),t._v(" 来运行。")])]),t._v(" "),s("p",[t._v("当一个函数被使用 "),s("code",[t._v("new")]),t._v(" 操作符执行时，它按照以下步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("一个新的空对象被创建并分配给 "),s("code",[t._v("this")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("函数体执行。通常它会修改 "),s("code",[t._v("this")]),t._v("，为其添加新的属性。")])]),t._v(" "),s("li",[s("p",[t._v("返回 "),s("code",[t._v("this")]),t._v(" 的值。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this = {};（隐式创建）")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加属性到 this")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isAdmin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return this;（隐式返回）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"构造器模式测试-new-target"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造器模式测试-new-target"}},[t._v("#")]),t._v(" 构造器模式测试：new.target")]),t._v(" "),s("p",[t._v("在一个函数内部，使用 "),s("code",[t._v("new.target")]),t._v(" 属性来检查它是否被使用 "),s("code",[t._v("new")]),t._v(" 进行调用了。")]),t._v(" "),s("h4",{attrs:{id:"构造器的-return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造器的-return"}},[t._v("#")]),t._v(" 构造器的 return")]),t._v(" "),s("p",[t._v("构造器没有 "),s("code",[t._v("return")]),t._v(" 语句。它们的任务是将所有必要的东西写入 "),s("code",[t._v("this")]),t._v("(隐式返回)，并自动转换为结果。")]),t._v(" "),s("p",[t._v("但是，如果这有一个 "),s("code",[t._v("return")]),t._v(" 语句，那么规则就简单了：")]),t._v(" "),s("ul",[s("li",[t._v("如果 "),s("code",[t._v("return")]),t._v(" 返回的是一个对象，则返回这个对象，而不是 "),s("code",[t._v("this")]),t._v("。")]),t._v(" "),s("li",[t._v("如果 "),s("code",[t._v("return")]),t._v(" 返回的是一个原始类型，则忽略。")])]),t._v(" "),s("blockquote",[s("p",[t._v("带有对象的 "),s("code",[t._v("return")]),t._v(" 返回该对象，在所有其他情况下返回 "),s("code",[t._v("this")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"构造器中的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造器中的方法"}},[t._v("#")]),t._v(" 构造器中的方法")]),t._v(" "),s("p",[t._v("我们不仅可以将属性添加到 "),s("code",[t._v("this")]),t._v(" 中，还可以添加方法。")]),t._v(" "),s("h2",{attrs:{id:"_4-6-可选链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-可选链"}},[t._v("#")]),t._v(' 4.6   可选链 "?."')]),t._v(" "),s("p",[t._v("可选链 "),s("code",[t._v("?.")]),t._v(" 是一种访问嵌套对象属性的安全的方式。即使中间的属性不存在，也不会出现错误。")]),t._v(" "),s("h4",{attrs:{id:"不存在的属性-的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不存在的属性-的问题"}},[t._v("#")]),t._v(' "不存在的属性"的问题')]),t._v(" "),s("p",[t._v("当我们访问嵌套对象的某个属性时，其中间属性出现了不存在的情况。例如user.address.street，当address不存在时，就会报错。我们希望避免出现这种错误，而是接受 "),s("code",[t._v("html = null")]),t._v(" 作为结果。")]),t._v(" "),s("blockquote",[s("p",[t._v("用if判断不够优雅，嵌套层次很深时就会出现多次重复")])]),t._v(" "),s("h4",{attrs:{id:"可选链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选链"}},[t._v("#")]),t._v(" 可选链")]),t._v(" "),s("p",[t._v("如果可选链 "),s("code",[t._v("?.")]),t._v(" 前面的部分是 "),s("code",[t._v("undefined")]),t._v(" 或者 "),s("code",[t._v("null")]),t._v("，它会停止运算并返回该部分。")]),t._v(" "),s("p",[t._v("例如 "),s("code",[t._v("value?.prop")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("如果 "),s("code",[t._v("value")]),t._v(" 存在，则结果与 "),s("code",[t._v("value.prop")]),t._v(" 相同，")]),t._v(" "),s("li",[t._v("否则（当 "),s("code",[t._v("value")]),t._v(" 为 "),s("code",[t._v("undefined/null")]),t._v(" 时）则返回 "),s("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[s("strong",[t._v("不要过度使用可选链")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("?.")]),t._v(" "),s("strong",[t._v("前的变量必须已声明")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("我们可以使用")]),t._v(" "),s("code",[t._v("?.")]),t._v(" "),s("strong",[t._v("来安全地读取或删除，但不能写入")])])])])]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("?.")]),t._v(" 左边部分不存在，就会立即停止运算（“短路效应”）。所以，如果后面有任何函数调用或者副作用，它们均不会执行。")]),t._v(" "),s("h2",{attrs:{id:"_4-7-symbol类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-symbol类型"}},[t._v("#")]),t._v(" 4.7   Symbol类型")]),t._v(" "),s("p",[t._v("对象的"),s("code",[t._v("属性键")]),t._v("只能是字符串类型或者 Symbol 类型")]),t._v(" "),s("h4",{attrs:{id:"symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),s("p",[t._v("“Symbol” 值表示"),s("strong",[t._v("唯一")]),t._v("的标识符。")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("Symbol()")]),t._v(" 来创建这种类型的值：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id 是 symbol 的一个实例化对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("Symbol 不会被自动转换为字符串")]),t._v("，可以使用.toString()方法来转换，或者直接使用symbol.description属性")])]),t._v(" "),s("h4",{attrs:{id:"隐藏-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐藏-属性"}},[t._v("#")]),t._v(' "隐藏"属性')]),t._v(" "),s("p",[t._v("Symbol 允许我们创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。")]),t._v(" "),s("h4",{attrs:{id:"对象字面量中的-symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象字面量中的-symbol"}},[t._v("#")]),t._v(" 对象字面量中的 Symbol")]),t._v(" "),s("p",[t._v("如果我们要在对象字面量 "),s("code",[t._v("{...}")]),t._v(" 中使用 Symbol，则需要使用方括号把它括起来。")]),t._v(" "),s("h3",{attrs:{id:"symbol-在-for-in-中会被跳过"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-在-for-in-中会被跳过"}},[t._v("#")]),t._v(" Symbol 在 for…in 中会被跳过")]),t._v(" "),s("p",[t._v("Symbol 属性不参与 "),s("code",[t._v("for..in")]),t._v(" 循环。")]),t._v(" "),s("h4",{attrs:{id:"全局symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局symbol"}},[t._v("#")]),t._v(" 全局symbol")]),t._v(" "),s("p",[t._v("有时我们想要名字相同的Symbol具有相同的实体，这里有一个"),s("strong",[t._v("全局Symbol注册表")]),t._v("。我们可以在其中创建 Symbol 并在稍后访问它们，它可以确保每次访问相同名字的 Symbol 时，返回的都是相同的 Symbol。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("Symbol.for(key)")]),t._v(":从注册表中读取（不存在则创建）Symbol.")]),t._v(" "),s("p",[t._v("该调用会检查全局注册表，如果有一个描述为 "),s("code",[t._v("key")]),t._v(" 的 Symbol，则返回该 Symbol，否则将创建一个新 Symbol（"),s("code",[t._v("Symbol(key)")]),t._v("），并通过给定的 "),s("code",[t._v("key")]),t._v(" 将其存储在注册表中。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Symbol.for(key)")]),t._v(" :通过全局 Symbol 返回一个名字。")])])]),t._v(" "),s("h4",{attrs:{id:"系统symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统symbol"}},[t._v("#")]),t._v(" 系统Symbol")]),t._v(" "),s("p",[t._v("JavaScript 内部有很多“系统” Symbol，我们可以使用它们来微调对象的各个方面。")]),t._v(" "),s("blockquote",[s("p",[t._v("symbol使用场景：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("“隐藏” 对象属性。 如果我们想要向“属于”另一个脚本或者库的对象添加一个属性，我们可以创建一个 Symbol 并使用它作为属性的键。Symbol 属性不会出现在 "),s("code",[t._v("for..in")]),t._v(" 中，因此它不会意外地被与其他属性一起处理。并且，它不会被直接访问，因为另一个脚本没有我们的 symbol。因此，该属性将受到保护，防止被意外使用或重写。")]),t._v(" "),s("p",[t._v("因此我们可以使用 Symbol 属性“秘密地”将一些东西隐藏到我们需要的对象中，但其他地方看不到它。")])]),t._v(" "),s("li",[s("p",[t._v("JavaScript 使用了许多系统 Symbol，这些 Symbol 可以作为 "),s("code",[t._v("Symbol.*")]),t._v(" 访问。我们可以使用它们来改变一些内置行为。例如，在本教程的后面部分，我们将使用 "),s("code",[t._v("Symbol.iterator")]),t._v(" 来进行 "),s("a",{attrs:{href:"https://zh.javascript.info/iterable",target:"_blank",rel:"noopener noreferrer"}},[t._v("迭代"),s("OutboundLink")],1),t._v(" 操作，使用 "),s("code",[t._v("Symbol.toPrimitive")]),t._v(" 来设置 "),s("a",{attrs:{href:"https://zh.javascript.info/object-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象原始值的转换"),s("OutboundLink")],1),t._v(" 等等。")])])])]),t._v(" "),s("h2",{attrs:{id:"_4-8对象-原始值转换-没看懂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8对象-原始值转换-没看懂"}},[t._v("#")]),t._v(" 4.8对象—原始值转换(没看懂？？？)")]),t._v(" "),s("ol",[s("li",[t._v("所有的对象在布尔上下文中均为 "),s("code",[t._v("true")]),t._v("。所以对于对象只有字符串和数值转换。")]),t._v(" "),s("li",[t._v("数值转换发生在对象相减或应用数学函数时。例如，"),s("code",[t._v("Date")]),t._v(" 对象可以相减，"),s("code",[t._v("date1 - date2")]),t._v(" 的结果是两个日期之间的差值。")]),t._v(" "),s("li",[t._v("至于字符串转换 —— 通常发生在我们像 "),s("code",[t._v("alert(obj)")]),t._v(" 这样输出一个对象和类似的上下文中。")])]),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=v.exports}}]);